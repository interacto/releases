import type { Observable } from "rxjs";
import { Subject } from "rxjs";
import type { Command } from "../../api/command/Command";
import type { InteractionData } from "../../api/interaction/InteractionData";
import type { Binding } from "../../api/binding/Binding";
import type { Interaction } from "../../api/interaction/Interaction";
import type { UndoHistory } from "../../api/undo/UndoHistory";
export declare class BindingImpl<C extends Command, I extends Interaction<D>, D extends InteractionData> implements Binding<C, I, D> {
    protected timeEnded: number;
    protected timeCancelled: number;
    protected asLogBinding: boolean;
    protected asLogCmd: boolean;
    protected activated: boolean;
    protected readonly interaction: I;
    protected cmd?: C;
    protected continuousCmdExec: boolean;
    protected readonly cmdProducer: (i?: D) => C;
    protected readonly cmdsProduced: Subject<C>;
    protected undoHistory: UndoHistory;
    constructor(continuousExecution: boolean, interaction: I, cmdProducer: (i?: D) => C, widgets: ReadonlyArray<EventTarget>, undoHistory: UndoHistory);
    when(): boolean;
    clearEvents(): void;
    protected createCommand(): C | undefined;
    catch(_err: undefined): void;
    first(): void;
    then(): void;
    end(): void;
    cancel(): void;
    endOrCancel(): void;
    ifCmdHadNoEffect(): void;
    ifCmdHadEffects(): void;
    ifCannotExecuteCmd(): void;
    getInteraction(): I;
    getCommand(): C | undefined;
    isActivated(): boolean;
    isRunning(): boolean;
    isStrictStart(): boolean;
    fsmCancels(): void;
    private cancelContinousWithEffectsCmd;
    fsmStarts(): void;
    fsmUpdates(): void;
    private continuousExecutionOnFSMUpdate;
    fsmStops(): void;
    private executeCommandOnFSMStop;
    private createAndInitCommand;
    private afterCmdExecuted;
    uninstallBinding(): void;
    isContinuousCmdExec(): boolean;
    setActivated(activated: boolean): void;
    setLogBinding(log: boolean): void;
    setLogCmd(log: boolean): void;
    produces(): Observable<C>;
    getTimesEnded(): number;
    getTimesCancelled(): number;
}
